const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const http = require('http');
const { Server } = require("socket.io");
const connectDB = require('./config/db');
const routes = require('./routes');
const jwt = require('jsonwebtoken');
const config = require('./config/config');
const Conversation = require('./models/Conversation');
const Message = require('./models/Message');

connectDB();

const app = express();
const server = http.createServer(app);

// Define allowed origins for CORS. This should be managed via environment variables.
const allowedOrigins = [
  'http://localhost:5173', // Development URL
  process.env.CLIENT_URL,  // Production URL injected by Render
].filter(Boolean); // Filter out any falsy values (e.g., if CLIENT_URL is not set)

const io = new Server(server, {
  cors: {
    origin: (origin, callback) => {
      // Allow requests with no origin (like mobile apps or curl requests) or from whitelisted domains
      if (!origin || allowedOrigins.includes(origin)) {
        callback(null, true);
      } else {
        callback(new Error('Not allowed by CORS'));
      }
    },
    methods: ["GET", "POST"]
  }
});

// Socket.IO Authentication Middleware
io.use((socket, next) => {
  const token = socket.handshake.auth.token;
  if (!token) {
    return next(new Error('Authentication error: No token provided.'));
  }

  jwt.verify(token, config.JWT_SECRET, (err, decoded) => {
    if (err) {
      return next(new Error('Authentication error: Invalid token.'));
    }
    // Attach user info to the socket for use in event handlers
    socket.user = { id: decoded.id, role: decoded.role };
    next();
  });
});

app.use(cors({ origin: allowedOrigins, credentials: true }));
app.use(express.json());

app.use((req, res, next) => {
  req.io = io;
  next();
});

// Health check route for Render to verify service is up
app.get('/api/health', (req, res) => {
  res.status(200).json({ status: 'ok', message: 'API is healthy' });
});

app.use('/api', routes);

io.on('connection', (socket) => {
  console.log(`A user connected: ${socket.id}, role: ${socket.user.role}`);

  // Have the user join rooms based on their role and unique ID
  if (socket.user.role === 'admin') {
    socket.join('admin');
    console.log(`User ${socket.id} joined admin room`);
  }
  // Every user joins a room for their own ID to receive personal notifications
  socket.join(socket.user.id);

  socket.on('joinConversation', (conversationId) => {
    socket.join(conversationId);
    console.log(`User ${socket.id} joined conversation ${conversationId}`);
  });

  // SECURE THIS HANDLER: Use the authenticated user ID from the socket.
  socket.on('sendMessage', async ({ conversationId, text }) => {
    // Ensure the user is authenticated before processing the message
    if (!socket.user) {
      return socket.emit('messageError', { message: 'Authentication required.' });
    }

    try {
      const message = new Message({
        conversation: conversationId,
        sender: socket.user.id, // Use the authenticated user's ID
        text,
      });

      await message.save();
      // Populate the sender details directly on the saved document instance
      const populatedMessage = await message.populate('sender', 'name role');

      io.to(conversationId).emit('receiveMessage', populatedMessage);
      await Conversation.findByIdAndUpdate(conversationId, { lastMessage: populatedMessage._id });
    } catch (error) {
      console.error('Error handling message:', error);
      socket.emit('messageError', { message: 'Could not send message.' });
    }
  });

  socket.on('disconnect', () => {
    console.log('User disconnected:', socket.id);
  });
});

// This block is for local development. Vercel handles the server lifecycle in production.
if (!process.env.VERCEL) {
  server.listen(config.PORT, '0.0.0.0', () => {
    console.log(`Server running on port ${config.PORT}`);
  });
}

module.exports = server;
